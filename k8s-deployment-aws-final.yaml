---
# Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: academic-deadline
---
# StorageClass for AWS EBS
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: ebs-sc
provisioner: ebs.csi.aws.com
volumeBindingMode: WaitForFirstConsumer
parameters:
  type: gp3
  fsType: ext4
allowVolumeExpansion: true
---
# MongoDB PersistentVolumeClaim (AWS EBS)
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: academic-deadline
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: ebs-sc
---
# Mongo Secret
apiVersion: v1
kind: Secret
metadata:
  name: mongo-secret
  namespace: academic-deadline
type: Opaque
data:
  MONGO_INITDB_ROOT_USERNAME: cm9vdA==  # root
  MONGO_INITDB_ROOT_PASSWORD: cGFzc3dvcmQxMjM=  # password123
---
# App ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: academic-deadline-config
  namespace: academic-deadline
data:
  NODE_ENV: "production"
  PORT: "3000"
  MONGO_URI: "mongodb://mongodb:27017/test"
  EMAIL_HOST: "smtp.gmail.com"
  EMAIL_PORT: "587"
---
# MongoDB Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb
  namespace: academic-deadline
  labels:
    app: mongodb
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
        - name: mongodb
          image: mongo:6.0-jammy
          ports:
            - containerPort: 27017
          envFrom:
            - secretRef:
                name: mongo-secret
          resources:
            limits:
              memory: "2Gi"
              cpu: "1000m"
            requests:
              memory: "1Gi"
              cpu: "500m"
          volumeMounts:
            - name: mongodb-storage
              mountPath: /data/db
          livenessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - mongosh
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
      volumes:
        - name: mongodb-storage
          persistentVolumeClaim:
            claimName: mongodb-pvc
---
# MongoDB Service
apiVersion: v1
kind: Service
metadata:
  name: mongodb
  namespace: academic-deadline
spec:
  selector:
    app: mongodb
  ports:
    - port: 27017
      targetPort: 27017
  type: ClusterIP
---
# App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: academic-deadline-app
  namespace: academic-deadline
  labels:
    app: academic-deadline-app
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: academic-deadline-app
  template:
    metadata:
      labels:
        app: academic-deadline-app
    spec:
      containers:
        - name: academic-deadline-app
          # Replace YOUR_ACCOUNT_ID with your actual AWS Account ID
          image: YOUR_ACCOUNT_ID.dkr.ecr.ap-south-1.amazonaws.com/academic-deadline-app:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          envFrom:
            - configMapRef:
                name: academic-deadline-config
          env:
            - name: EMAIL_USER
              valueFrom:
                secretKeyRef:
                  name: academic-deadline-secret
                  key: EMAIL_USER
            - name: EMAIL_PASS
              valueFrom:
                secretKeyRef:
                  name: academic-deadline-secret
                  key: EMAIL_PASS
            - name: SESSION_SECRET
              valueFrom:
                secretKeyRef:
                  name: academic-deadline-secret
                  key: SESSION_SECRET
          resources:
            limits:
              memory: "1Gi"
              cpu: "750m"
            requests:
              memory: "512Mi"
              cpu: "250m"
          livenessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: 3000
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: 5
            failureThreshold: 3
---
# App Service with AWS LoadBalancer
apiVersion: v1
kind: Service
metadata:
  name: academic-deadline-service
  namespace: academic-deadline
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
spec:
  type: LoadBalancer
  selector:
    app: academic-deadline-app
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 3000
